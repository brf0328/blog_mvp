# 博客系统 MVP 需求与架构设计

## 一、MVP 目标

* **快速上线**：以最快速度交付可用版本，支持发布、浏览文章。
* **轻量可迭代**：核心功能先行，后续可灵活扩展评论、搜索、社交分享等。
* **技术验证**：选定技术栈并验证基础架构是否稳定可靠。

---

## 二、核心需求

| 编号 | 功能模块  | 需求描述                      | 优先级 |
| -- | ----- | ------------------------- | --- |
| F1 | 用户管理  | 注册、登录、登出。简单权限：普通用户、管理员。   | 高   |
| F2 | 文章管理  | 管理员可创建、编辑、删除文章；草稿与发布状态切换。 | 高   |
| F3 | 前端展示  | 首页列表、文章详情页面；可分页浏览最新文章。    | 高   |
| F4 | 富文本编辑 | 支持 Markdown 编辑与实时预览。      | 中   |
| F5 | 栏目与标签 | 文章可按分类和标签归档，列表页支持筛选。      | 中   |
| F6 | 基本安全  | 密码加密存储；防止 XSS、CSRF；输入校验。  | 高   |
| F7 | 持久化存储 | MySQL 数据库存储用户、文章、分类、标签等。  | 高   |
| F8 | 配置与部署 | Docker 化部署；环境变量管理；本地一键启动。 | 高   |
| F9 | 日志与监控 | 简单访问日志；错误日志；请求追踪。         | 中   |

---

## 三、技术选型

* **后端框架**：FastAPI（Python），异步性能佳，自动生成文档。
* **编程语言**：Python 3.10+
* **数据库**：MySQL 8.x（关系型，成熟稳定）。
* **ORM**：Tortoise ORM + Aerich（数据库迁移）
* **模板引擎**：Jinja2，用于 SSR 页面渲染。
* **CSS 框架**：TailwindCSS，用于快速样式开发。
* **富文本编辑**：基于前端 Markdown 编辑器（如 SimpleMDE）并在后端渲染为 HTML。
* **认证方式**：Session + Cookie（使用 `fastapi-login` 或自研中间件）。
* **部署方案**：Docker + Docker Compose，本地和生产环境一致。
* **日志监控**：Uvicorn 内建日志 + Sentry 集成。

---

## 四、系统架构图（逻辑视图）

```text
+--------------+        +-------------+        +-----------+
|  用户浏览器   | <----> |  API 服务    | <----> |  MySQL    |
| (SSR 模板)   |        | (FastAPI)   |        | 8.x       |
+--------------+        +-------------+        +-----------+
        |                       |
        | 静态资源 / Markdown   |
        v                       v
     TailwindCSS             SQLAlchemy & Alembic
```

---

## 五、模块划分

1. **app/main.py**

   * FastAPI 应用实例、路由注册、Middleware（CORS、Session、错误处理）。

2. **app/models/**

   * Tortoise ORM 模型：User、Post、Category、Tag、关联表，映射至 MySQL。

3. **app/schemas/**

   * Pydantic 模式：请求参数与响应模型定义。

4. **app/crud/**

   * 数据库操作：封装增删改查接口。

5. **app/api/**

   * 路由层：`/auth`、`/posts`、`/categories`、`/tags`。基于 FastAPI 路由装饰器。

6. **app/core/**

   * 配置管理（`.env` 读取）、安全模块（密码哈希、Session 管理）、日志配置、全局异常处理。

7. **templates/**

   * Jinja2 模板：`index.html`（首页）、`detail.html`（文章详情）、`login.html`、`edit.html`。

8. **static/**

   * TailwindCSS 编译产物、Logo、favicon。

9. **docker/**

   * `Dockerfile`（应用镜像）、`docker-compose.yml`（MySQL 服务、应用服务、可选 Redis）。

---

## 六、开发与交付流程

1. **环境准备**：编写 `docker-compose.yml`，包含 FastAPI、MySQL 服务。
2. **项目初始化**：创建虚拟环境（venv/poetry）、初始化 Git 仓库。
3. **数据库设计与迁移**：定义 SQLAlchemy 模型并编写 Alembic 迁移脚本；执行首次迁移。
4. **用户认证模块**：实现用户注册、登录、登出功能，Session 存储在 Redis 或数据库中。
5. **文章 CRUD 与前端渲染**：完成文章的创建、编辑、发布、删除接口及对应模板页面。
6. **样式与编辑器集成**：集成 TailwindCSS 及 Markdown 编辑器，完善前端交互。
7. **安全与校验**：输入校验（Pydantic）、XSS 防护、CSRF 保护（依赖 Cookie + Session）。
8. **测试用例**：编写单元测试（pytest）、集成测试（HTTPX + FastAPI TestClient）。
9. **部署验证**：在 Docker Compose 下验证服务联通性与环境一致性；修复遗留问题。
10. **上线发布**：打标签（git tag）、通过 CI/CD 自动化构建并部署到生产环境。

---

以上即采用 FastAPI + Python + MySQL 的博客系统 MVP 需求与架构设计，聚焦核心功能，确保快速落地与平滑迭代。

---

## 七、从零开始的任务细分

以下任务分解为最小可执行单元，适合无开发经验的新人按序完成：

### 1. 环境搭建

1.1 安装 Git：在官网下载安装，并配置用户名、邮箱。
1.2 安装 Anaconda 或 Miniconda：从官网下载安装，添加 conda 到系统 PATH。
1.3 创建 Conda 环境：

```bash
conda create -n blog-mvp python=3.10 -y
conda activate blog-mvp
```

1.4 验证工具：运行 `git --version`、`conda --version`、`python --version`，确保安装成功。

### 2. 项目初始化

2.1 在 GitHub 上创建一个新仓库（public 或 private），命名为 `blog-mvp`。

2.2 本地克隆仓库并进入目录：

```bash
git clone https://github.com/<your-username>/blog-mvp.git
cd blog-mvp
```

2.3 创建 Conda 环境并激活：

```bash
conda create -n blog-mvp python=3.10 -y
conda activate blog-mvp
```

2.4 初始化项目文件和目录结构，并添加依赖配置：

```bash
mkdir app templates static docker
# 创建配置文件
touch README.md .gitignore requirements.txt
```

* **.gitignore** 添加：

  ```gitignore
  venv/
  __pycache__/
  *.pyc
  .env
  migrations/
  ```
* **requirements.txt** 编写以下依赖：

  ```text
  fastapi
  uvicorn
  tortoise-orm
  aerich
  pymysql
  jinja2
  python-multipart
  fastapi-login
  markdown2
  ```

2.5 安装依赖包：

```bash
pip install -r requirements.txt
```

2.6 将当前状态提交到本地仓库：

```bash
git add .
git commit -m "chore: 初始化项目结构与依赖配置"
```

2.7 将本地 `main` 分支推送到 GitHub：

```bash
git branch -M main
git remote add origin https://github.com/<your-username>/blog-mvp.git
git push -u origin main
```

2.8 规范 Git 分支与协作流程：

* **主分支**：`main`，用于发布稳定版本。
* **功能分支**：`feature/xxx`（如 `feature/user-auth`），用于新功能开发。
* **提交规范**：采用 [Conventional Commits](https://www.conventionalcommits.org/) 规范，如 `feat: add login endpoint`。
* **Pull Request**：功能完成后，推送功能分支到 GitHub，发起 PR，进行代码 Review 后合并到 `main`。

### 3. 数据库模型与迁移. 数据库模型与迁移

3.1 安装 Tortoise ORM 与 Aerich：在 `requirements.txt` 添加 `tortoise-orm` 和 `aerich`，并运行 `pip install -r requirements.txt`。
3.2 在 `app/models.py` 定义 Tortoise ORM 模型：User、Post、Category、Tag，以及关联表。
3.3 在 `app/core/config.py` 配置 Tortoise：指定 MySQL 数据库 URL、模型模块路径、连接池设置。
3.4 初始化 Aerich：在项目根目录执行：

```bash
aerich init -t app.core.config.TORTOISE_CONFIG --location app/migrations
 aerich init-db
```

3.5 每次模型修改后生成并应用迁移：

```bash
aerich migrate --name "描述性名称"
 aerich upgrade
```

### 4. 用户认证模块 用户认证模块 用户认证模块

5.1 实现注册接口：在 `app/api/auth.py` 接受用户注册请求，使用 `bcrypt` 哈希密码并存库。
5.2 实现登录接口：校验密码，生成 Session 并设置 Cookie。
5.3 在 `app/core/security.py` 封装密码哈希和验证函数。
5.4 使用 Postman 测试注册和登录流程，确保能存取 Session。

### 6. 文章 CRUD 与前端渲染

6.1 在 `app/api/posts.py` 编写文章创建/查询/更新/删除接口。
6.2 在 `app/schemas.py` 定义 Pydantic 模式 PostCreate、PostRead。
6.3 在 `templates/` 中编写 `index.html` 和 `detail.html`。
6.4 在 `app/main.py` 配置 `Jinja2Templates` 并挂载静态文件目录。
6.5 浏览器访问首页和详情页，验证文章展示。

### 7. Markdown 编辑与样式

7.1 在 `static/` 引入 SimpleMDE 编辑器并在 `edit.html` 集成。
7.2 前端发送 Markdown 文本至创建接口；后端使用 `markdown2` 渲染为 HTML。
7.3 使用 TailwindCSS 美化导航、列表、详情页。

### 8. 安全与校验

8.1 在 Pydantic 模式中添加字段校验，如最小长度、非空。
8.2 配置 `CORSMiddleware`，限制跨域来源。
8.3 在表单提交中启用 CSRF 防护（通过 `fastapi-login` 或自定义中间件）。

### 9. 测试与调试

9.1 安装 `pytest`，在 `tests/` 下编写单元测试，运行 `pytest` 确保通过。
9.2 使用 FastAPI TestClient 进行集成测试，模拟各路由请求。

### 10. （暂不考虑打包上线）

## 本阶段暂不进行生产环境打包与部署，待核心功能开发完成后再行规划。

## 八、数据库 ER 图

下面使用 Mermaid 语法绘制数据库 ER 图，展示各表及其关系：

```mermaid
erDiagram
    用户 (USER) {
        int id PK "主键，自增"
        varchar 用户名 username
        varchar 邮箱 email
        varchar 密码哈希 password_hash
        datetime 创建时间 created_at
    }
    文章 (POST) {
        int id PK "主键，自增"
        varchar 标题 title
        text Markdown 内容 content_markdown
        text 渲染后 HTML content_html
        bool 是否已发布 is_published
        datetime 创建时间 created_at
        datetime 更新时间 updated_at
        int 作者ID author_id FK
    }
    分类 (CATEGORY) {
        int id PK "主键，自增"
        varchar 名称 name
    }
    标签 (TAG) {
        int id PK "主键，自增"
        varchar 名称 name
    }
    文章分类关联 (POST_CATEGORY) {
        int 文章ID post_id FK
        int 分类ID category_id FK
    }
    文章标签关联 (POST_TAG) {
        int 文章ID post_id FK
        int 标签ID tag_id FK
    }

    用户 ||--o{ 文章 : "发表"
    文章 }o--|| 用户 : "作者"
    文章 ||--o{ 文章分类关联 : "所属分类"
    分类 ||--o{ 文章分类关联 : "包含文章"
    文章 ||--o{ 文章标签关联 : "包含标签"
    标签 ||--o{ 文章标签关联 : "被文章使用"
```
